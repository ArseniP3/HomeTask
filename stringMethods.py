str = '''Таким образом, постоянное информационно-техническое обеспечение 
нашей деятельности напрямую зависит от форм воздействия! Значимость этих 
проблем настолько очевидна, что начало повседневной работы...'''

# 1. Конкатенация или сложение строк:
str1 = str[10:20]
str2 = str[0:10]
print('#1 -', str1+str2)

# 2. Повторение строци n раз:
n = 3
print('#2 -', str2*n)

# 3. len(str) это функция которая возвращает длинну строки.
print('#3 -', len(str))

# 4. str.find(str1) / str.rfind(str1) функция которая возвращает индекс первого / последнего вхождения
# подстроки встроку если такой подстроки нет, возвращает -1.
print('#4 -', str.find('образом'))
print('   ',str.rfind('000000'))

# 5. str.index(str1) / str.rindex(str) функция которая возвращает индекс первого / последнего вхождения
# # подстроки встроку если такой подстроки нет, то выбрасывает ошибку ValueError.
print('#5 -', str.index('образом'))
#print('   ',str.rindex('000000')) - здесь выбрасывает ошибку.

# 6. str.replace(old,new) функция которая возвращает копию строки в которой
# все вхождения old заменены на new.

print('#6 -', str.replace('о','1'))

# 7. str.split(резделитель) разбивает строку по разделителю и эти элементы добавляет в список.
print('#7 -', str.split(' '))

# 8. Методы проверки строки на определенные условия:
# str.isdigit() - возвращает True если строка состоит из цифр
# str.isalpha() - возвращает True если стока состоит из букв
# str.isalnum() - возвращает True если строка состоит из букв и цифр
# str.islower() - возвращает True если строка в нижнем регистре
# str.isupper() - возвращает True если строка в верхнем регистре
# str.title() - возвращает True если слова строки нацинаются с большой буквы
# str.isspace() - возвращает True если строка состоит из пробельных символов
print('#8.1 -', str.isdigit())
print('#8.2 -', str.isalpha())
print('#8.3 -', str.isalnum())
print('#8.4 -', str.islower())
print('#8.5 -', str.isupper())
print('#8.6 -', str1.istitle())
print('#8.7 -', str.isspace())

# 9. str.upper() / str.lower() функции которые переводят все символы в верхний / нижний регистр.
print('#9 -', str1.upper())
print('    ', str1.lower())

# 10. str.startwith(str) / str.endwith(str) функция, которая возвращает тру если строка начинается / кончается с подстроки

print('#10 -', str.startswith('Таким'))
print('     ', str.endswith('Krox'))

# 11. ord(X) функция возвращающая код символа Х в кодировке ASCII
print('Task #11 -', ord('x'))

# 12. chr(120) функция возвращающая символ кодировка которого указана в качестве аргумента.
print('Task #12 -', chr(120))

# 13. str.capitalize() функция, которая переводит первый символ строки в верхний регистр
print('Task #13 -', str1)
print('          ', str1.capitalize())

# 14. str.center(width, 'q') функция, которая возвращает отцентрованую строку с шириной width, по краям
# добавля символ q, по умолчанию знак пробела.
print(str2.center(50,'-'))

# 15. str.count('q') функция, которая возвращает кол-во вхождений q в строку str
print(str.count('о'))